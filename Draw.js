/*Draw.js by Arthur Sun*/
(function(global){
	function changeInt(n,a,b){var n1 = parseInt(n,a);return n1.toString(b);}function changeFloat(n,a,b){var n1 = parseFloat(n,a);return n1.toString(b);} function randFloat(a,b){return Math.random() * (b-a) + a;} function randInt(a,b){return Math.floor(Math.random() * (b-a+1) + a);} function constrain(a,b,c){if(a>c){return c}if(a<b){return b}return c}; Object.defineProperty(Math, 'changeInt', {value: changeInt}); Object.defineProperty(Math, 'changeFloat', {value: changeFloat}); Object.defineProperty(Math, 'eps', {value: 1e-16}); Object.defineProperty(Math, 'TAU', {value: Math.PI*2}); function roundTo(n,t){if(t == undefined){t = 3;}var g = Math.pow(10, t);return Math.round(n*g)/g;} Object.defineProperty(Math, 'roundTo', {value: roundTo});function Button(x,y,w,h,t,f){this.p = nV(x,y); this.d = nV(w,h); t = t || "Hello"; this.text = new Text(t); this.f = f || function(){}; this.a = 0; this.fillColor = new Color(20,220,210); this.strokeColor = new Color(); window.addEventListener('mousedown',this.f.bind(this),false); } Object.assign(Button.prototype, {in: function(x,y){var _p = nV(x,y); _p.rotateAround(-this.a,this.p); return _p.x>this.p.x-this.d.x/2 && _p.x<this.p.x+this.d.x/2 && _p.y>this.p.y-this.d.y/2 && _p.y<this.p.y+this.d.y/2; }, change: function(f){window.removeEventListener('mousedown', this.f.bind(this), false); this.f = f; window.addEventListener('mousedown', f.bind(this), false); }, draw: function(tool){this.text.p.set(this.p); this.text.size = Math.min(this.d.x,this.d.y)/this.text.text.length*2; tool.fill(this.fillColor); tool.stroke(this.strokeColor); tool.rectMode('center'); tool.translate(this.p); tool.rotate(this.a); tool.rect(0,0,this.d.x,this.d.y,6); tool.rotate(-this.a); tool.translate(this.p.neg()); this.text.draw(tool); } });function Line2(a,b,c,d){this.color = new Color();this.R = 1;this.C = 1;this.fixed = true;this.density = 1e3;this.o = 0;this.v = nV();this.set(a,b,c,d);return this;} function nL(a,b,c,d){return new Line2(a,b,c,d);} Object.assign(Line2.prototype, {getAngularMomentum: function(){return this.o*1/12*Math.pow(this.mag(),2)*this.getMass();}, getMass: function(){return this.fixed ? 1e300 : this.mag()*this.density;}, set: function(a,b,c,d){if(a instanceof Line2){this.get(a);}else if(a instanceof Vec2 && b instanceof Vec2){this.p1 = a, this.p2 = b;}else if(a instanceof Vec2 && typeof b == 'number' && typeof c == 'number'){this.p1 = a, this.p2 = nV(b,c);}else if(c instanceof Vec2 && typeof a == 'number' && typeof b == 'number'){this.p2 = c, this.p1 = nV(a,b); }else{this.p1 = nV(a,b), this.p2 = nV(c,d); } return this; }, rotate: function(a=0){this.p1.rotate(a); this.p2.rotate(a); }, diff: function(){return this.p2.clone().sub(this.p1); }, angle: function(){return this.diff().angle();}, mag: function(){return this.diff().mag();}, rotateAround: function(a=0,p){if(p == undefined) p = this.getCenter(); this.sub(p); this.rotate(a); this.add(p); }, getCenter: function(){return this.p1.mid(this.p2);}, add: function(a,b){a = nV(a,b);this.p1.add(a);this.p2.add(a);}, sub: function(a,b){a = nV(a,b);this.p1.sub(a);this.p2.sub(a);}, update: function(){if(this.fixed){this.o = 0, this.v.set();}this.add(this.v);this.rotateAround(this.o);}, draw: function(tool){tool.strokeWeight(1);tool.stroke(this.color);tool.line(this.p1,this.p2);}, vsLine: function(L,_in_){if(_in_ == undefined){_in_ = false;} var c2 = L.getCenter(), c1 = this.getCenter(); var d1 = c2.clone().sub(c1), d2 = L.diff(); var _a = this.clone(), _b = L.clone(), ang = -d2.angle(); _a.rotate(ang); _b.rotate(ang); var _in = false; if((_b.p1.y<=_a.p1.y && _b.p2.y>=_a.p2.y) || (_b.p1.y>=_a.p1.y && _b.p2.y<=_a.p2.y)){if(_in_ || L.vsLine(this,true)){_in = true; } } return _in; } }); function Clock(auto){if(auto == undefined){auto = true;}this.waits = [];this.laps=[];this.time=Date.now();this.delta=0;this.last=this.time;this.start=this.time;this.running=auto;return this;} Object.assign(Clock.prototype, {update: function(){this.delta = Date.now()-this.last;if(this.running){this.time+=this.delta;} this.last = Date.now(); return this.delta/1000; }, getTime: function(){this.update();return (this.time-this.start)/1000;}, stop: function(){this.running = false;}, record: function(){this.laps.push(this.getTime());}, start: function(){this.running = true;}, getLast: function(){if(this.laps.length){return this.getTime()-this.laps[this.laps.length-1];}else{return this.getTime();}}, reset: function(){this.laps = [];this.time = Date.now();this.start = this.time;this.running = false;}, add: function(name, time){var t = this.getTime();if(time == undefined){time = 1;}this.waits[name] = {time: time, made: t, last: t};}, is: function(name){var t = this.getTime();if(t-this.waits[name].last>=this.waits[name].time){this.waits[name].last = t;return true;}else return false;}, remove: function(name){delete this.waits[name];}, });
	function Text(text,x,y){this.text = text || ""; this.font = "monospace"; this.size = 18; this.p = nV(x,y); this.strokedText = false; this.filledText = true; this.align = 'center'; this.fillColor = new Color(); this.strokeColor = new Color(0,200,60); this.a = 0; this.ls = 1; } Object.assign(Text.prototype, {draw: function(tool){if(!tool)return;var u = 4;tool.translate(this.p);tool.rotate(this.a);tool.font(this.font);tool.textSize(this.size);tool.textAlign(this.align);if(this.filledText){tool.fill(this.fillColor);tool.text(this.text,0,this.size/u);}if(this.strokedText){tool.strokeWeight(this.ls);tool.stroke(this.strokeColor);tool.strokeText(this.text,0,this.size/u); }tool.rotate(-this.a);tool.translate(this.p.neg());} }); function Vec2(x,y){return this.set(x,y);} function nV(x,y){return new Vec2(x,y);} Object.assign(Vec2, {polar: function(a,r){return nV(Math.cos(a)*r, Math.sin(a)*r);}, mix: function(a,b,u){var c = a.clone();a.lerp(b,u);b.lerp(c,u);} }); Object.assign(Vec2.prototype, {set: function(x,y){this.x = 0, this.y = 0;if(y == undefined){if(x instanceof Vec2){this.get(x);}else if(typeof x == 'number'){this.x = x;}}else{this.x = x, this.y = y;}return this;}, mul: function(a,b){a = nV(a,b);return nV(this.dot(a), this.x*a.y + this.y*a.x);}, scl: function(scl){return nV(this.x*scl, this.y*scl);}, add: function(a,b){a = nV(a,b);this.x += a.x, this.y += a.y;return this;}, sub: function(a,b){a = nV(a,b);this.x -= a.x, this.y -= a.y;return this;}, dot: function(a,b){if(a == undefined){a = this.clone();}else if(!(a instanceof Vec2)){a = nV(a, b);}return this.x*a.x + this.y*a.y;}, cross: function(a,b){if(a == undefined){a = this.clone();}else if(!(a instanceof Vec2)){a = nV(a, b);}return this.x*a.y - this.y*a.x;}, mag: function(){return Math.sqrt(this.x*this.x + this.y*this.y)}, round: function(t){this.x = Math.roundTo(this.x, t); this.y = Math.roundTo(this.y, t);return this;}, angle: function(){var a = Math.atan2(this.y, this.x);return a<0 ? a+Math.TAU : a;}, onAxis: function(a){return Vec2.polar(a-this.angle(), this.mag());}, rotate: function(a){this.get(Vec2.polar(this.angle()+a, this.mag())); return this;}, rotateAround(a,p){if(p == undefined){p = nV();}this.sub(p);this.rotate(a);this.add(p);return this;}, norm: function(){var m = this.mag();return nV(this.x/m, this.y/m);}, equals: function(v){return Math.abs(this.x-v.x)<Math.eps &&  Math.abs(this.y-v.y)<Math.eps}, neg: function(){return nV(-this.x, -this.y);}, mid: function(a,b){a = nV(a,b);return nV(this.x/2+a.x/2, this.y/2+a.y/2);}, lerp: function(a,u){this.x+=(a.x-this.x)*u;this.y+=(a.y-this.y)*u;return this;}, toString: function(t){var v = this.clone();v.round(t);return "Vec2("+v.x+", "+v.y+")";}, vsLine: function(a,b){var L = nL(a,b); var data = {}; var m = L.mag(); var p = this.clone(), angle = L.angle()+Math.PI/2, c = L.getCenter(); p.sub(c); p.set(p.onAxis(angle)); p.y = Math.abs(p.y); if(p.y>m/2){var d1 = L.p1.clone().sub(this).mag(), d2 = L.p2.clone().sub(this).mag(); var cp = d1 > d2 ? L.p2.clone() : L.p1.clone(); data.dist = cp.clone().sub(this).mag(); data.p = cp; }else{data.dist = p.x; var n = nV(0, -p.x); n.rotate(angle-Math.PI/2); n.add(this); data.p = n; } data.dist = Math.abs(data.dist); return data; } }); function Color(a,b,c,d){this.set(a,b,c,d);return this;} Object.assign(Color.prototype, {set: function(a,b,c,d){if(a == undefined){return this._set(0,0,0,255);}else if(b == undefined){if(a instanceof Color){return this.get(a); }else if(typeof a == 'number'){return this._set(a,a,a,255); }else if(typeof a == 'string'){return this.setFromString(a); }else if(typeof a == 'object'){return this.setFromObj(a); } }else if(c == undefined){return this._set(a,a,a,b); }else if(d == undefined){return this._set(a,b,c,255); }else if(d != undefined){return this._set(a,b,c,d); } }, _set: function(a,b,c,d){this.r = a, this.g = b, this.b = c, this.a = d;return this;}, setFromString: function(str){if(str[0] == '#'){str = str.substring(1,str.length);} this.r = Number('0x'+str.substring(0,2)); this.g = Number('0x'+str.substring(2,4)); this.b = Number('0x'+str.substring(4,6)); if(str.length>6){this.a = Number('0x'+str.substring(0,2));} else{this.a = 255;} this._c(); return this; }, setFromObj: function(obj){this.r = obj.r; this.g = obj.g; this.b = obj.b; this.a = obj.a; this._c(); return this; }, getCssString: function(){function t0(n){n = Math.round(Math.abs(n)); var a0 = changeFloat(n,10,16); if(n<16){a0 = "0"+a0;} return a0; } return "#"+t0(this.r)+t0(this.g)+t0(this.b)+t0(this.a); }, getValue: function(){function t0(n){n = Math.round(Math.abs(n)); var a0 = changeFloat(n,10,16); if(n<16){a0 = "0"+a0;} return a0; } return Number('0x'+t0(this.r)+t0(this.g)+t0(this.b)+t0(this.a)); }, getObj: function(){return {r: this.r, g: this.g, b: this.b, a: this.a };}, equals: function(c){return Math.abs(this.r-c.r)<Math.eps && Math.abs(this.g-c.g)<Math.eps && Math.abs(this.b-c.b)<Math.eps && Math.abs(this.a-c.a)<Math.eps;}, lerp: function(c,u){this.r+=(c.r-this.r)*u;this.g+=(c.g-this.g)*u; this.b+=(c.b-this.b)*u; this.a+=(c.a-this.a)*u; this._c(); return this; }, _c: function(){this.r = constrain(this.r, 0, 255); this.g = constrain(this.g, 0, 255); this.b = constrain(this.b, 0, 255); this.a = constrain(this.a, 0, 255); }, add: function(a,b,c,d){var _c = new Color(a,b,c,d); this.r+=_c.r; this.g+=_c.g; this.b+=_c.b; this.a+=_c.a; this._c(); return this; }, sub: function(a,b,c,d){var _c = new Color(a,b,c,d); this.r-=_c.r; this.g-=_c.g; this.b-=_c.b; this.a-=_c.a; this._c(); return this; }, scale: function(scl){this.r*=scl; this.g*=scl; this.b*=scl; this.a*=scl; this._c(); return this; }, mix: function(b, u){var _this = this.clone(); this.lerp(b, u); b.lerp(_this, u);} });
	function Draw(space){this.space = space; this.fillColor = new Color(255); this.strokeColor = new Color(); this.lineWidth = 1; this._fill = true; this._stroke = true; this._textSize = 21; this._font = "monospace"; this._textAlign = "center"; this.tas = []; this.rectAlign = "corner"; this.d = this.space.getContext("2d");this.d.lineJoin = 'round';this.d.lineCap = 'round';this.d1 = false;this.pos = nV();this.scl = 1;this.rot = 0;}Object.assign(Draw.prototype, {noStroke: function(){this._stroke = false; }, noFill: function(){this._fill = false; }, strokeWeight: function(w){this.lineWidth = w; }, rectMode: function(m){this.rectAlign = m; }, textAlign: function(a){this._textAlign = a; }, textSize: function(s){this._textSize = s; }, font: function(f){this._font = f; }, stroke: function(r,g,b,a){this._stroke = true; this.strokeColor.set(r,g,b,a); }, fill: function(r,g,b,a){this._fill = true; this.fillColor.set(r,g,b,a); }, translate: function(x,y){if(!y && x.x != undefined){var _x = x.x; var _y = x.y; }else{var _x = x, _y = y; } var obj = {type: 'translate', x: _x, y: _y}; var o1 = this.tas[this.tas.length-1]; if(o1 && o1.type == 'translate' && o1.x == -obj.x && o1.y == -obj.y){this.tas.splice(this.tas.length-1, 1); return; } this.tas.push(obj); }, rotate: function(a){var obj = {type: 'rotate', a: a}; var o1 = this.tas[this.tas.length-1]; if(o1 && o1.type == 'rotate' && o1.a == -obj.a){this.tas.splice(this.tas.length-1, 1); return; } this.tas.push(obj); }, scale: function(x,y){if(y == undefined){y = x; } var obj = {type: 'scale', x: x, y: y}; var o1 = this.tas[this.tas.length-1]; if(o1 && o1.type == 'scale' && o1.x == 1/obj.x && o1.y == 1/obj.y){this.tas.splice(this.tas.length-1, 1); return; } this.tas.push(obj); }, pop: function(){this.tas = []; }, s0: function(){this.d.translate(this.pos.x,this.pos.y);this.d.rotate(this.rot);this.d.scale(this.scl,this.scl);for(var i=0;i<this.tas.length;i++){if(this.tas[i].type == 'translate'){this.d.translate(this.tas[i].x, this.tas[i].y); }else if(this.tas[i].type == 'rotate'){this.d.rotate(this.tas[i].a); }else if(this.tas[i].type == 'scale'){this.d.scale(this.tas[i].x, this.tas[i].y); } } }, f0: function(){for(var i=this.tas.length-1;i>=0;i--){if(this.tas[i].type == 'translate'){this.d.translate(-this.tas[i].x, -this.tas[i].y); }else if(this.tas[i].type == 'rotate'){this.d.rotate(-this.tas[i].a); }else if(this.tas[i].type == 'scale'){this.d.scale(1/this.tas[i].x, 1/this.tas[i].y); } }this.d.scale(1/this.scl,1/this.scl);this.d.rotate(-this.rot);this.d.translate(-this.pos.x,-this.pos.y);}, line: function(x1,y1,x2,y2){this.d.beginPath();this.s0(); this.d.lineWidth = this.lineWidth; this.d.strokeStyle = this.strokeColor.getCssString(); if(arguments.length == 2 && typeof x1.x == 'number' && typeof y1.x == 'number'){this.d.moveTo(x1.x,x1.y); this.d.lineTo(y1.x,y1.y); }else{this.d.moveTo(x1,y1); this.d.lineTo(x2,y2); } if(this._stroke){this.d.stroke();} this.f0(); }, rect: function(x,y,w,h,r){if(!r){this.d.beginPath(); this.s0(); this.d.strokeStyle = this.strokeColor.getCssString(); this.d.fillStyle = this.fillColor.getCssString(); if(this.rectAlign == "center") this.d.translate(-w/2,-h/2); this.d.rect(x,y,w,h); if(this.rectAlign == "center") this.d.translate(w/2,h/2); if(this._stroke){this.d.stroke();} if(this._fill){this.d.fill();} this.f0(); }else if(r){this.d.beginPath(); this.s0(); if(this.rectAlign == "center") this.d.translate(-w/2,-h/2); this.d.moveTo(x+r, y); this.d.lineTo(x+w-r, y); this.d.quadraticCurveTo(x+w, y, x+w, y+r); this.d.lineTo(x+w, y+h-r); this.d.quadraticCurveTo(x+w, y+h, x+w-r, y+h); this.d.lineTo(x+r,y+h); this.d.quadraticCurveTo(x, y+h, x, y+h-r); this.d.lineTo(x, y+r); this.d.quadraticCurveTo(x,y,x+r,y); this.d.lineWidth = this.lineWidth; this.d.fillStyle = this.fillColor.getCssString(); this.d.strokeStyle = this.strokeColor.getCssString(); if(this._stroke){this.d.stroke();} if(this._fill){this.d.fill();} if(this.rectAlign == "center") this.d.translate(w/2,h/2); this.f0(); } }, ellipse: function(x, y, w, h, a = 0, b = 2*Math.PI, e){this.d.beginPath(); this.s0(); this.d.ellipseMode = 'center'; if(e) this.d.moveTo(x,y); this.d.ellipse(x,y,w,h,0,a,b); if(e) this.d.lineTo(x,y); this.d.lineWidth = this.lineWidth; this.d.fillStyle = this.fillColor.getCssString(); this.d.strokeStyle = this.strokeColor.getCssString(); if(this._stroke){this.d.stroke();} if(this._fill){this.d.fill();} this.f0(); }, triangle: function(x1,y1,x2,y2,x3,y3){this.d.beginPath(); this.s0(); this.d.lineWidth = this.lineWidth; this.d.strokeStyle = this.strokeColor.getCssString(); this.d.fillStyle = this.fillColor.getCssString(); this.d.moveTo(x1,y1); this.d.lineTo(x2,y2); this.d.moveTo(x2,y2); this.d.lineTo(x3,y3); this.d.moveTo(x3,y3); this.d.lineTo(x1,y1); if(this._stroke){this.d.stroke();} if(this._fill){this.d.fill();} this.f0(); }, quad: function(x1,y1,x2,y2,x3,y3,x4,y4){this.d.beginPath(); this.s0(); this.d.lineWidth = this.lineWidth; this.d.strokeStyle = this.strokeColor.getCssString(); this.d.fillStyle = this.fillColor.getCssString(); this.d.moveTo(x1,y1); this.d.lineTo(x2,y2); this.d.moveTo(x2,y2); this.d.lineTo(x3,y3); this.d.moveTo(x3,y3); this.d.lineTo(x4,y4); this.d.moveTo(x4,y4); this.d.lineTo(x1,y1); if(this._stroke){this.d.stroke();} if(this._fill){this.d.fill();} this.f0(); }, text: function(t,x,y){this.d.beginPath(); this.s0(); this.d.fillStyle = this.fillColor.getCssString(); this.d.textAlign = this._textAlign; this.d.font = this._textSize+"px "+this._font; if(arguments.length == 2){this.d.fillText(t, x.x, x.y);} else{this.d.fillText(t, x, y);} if(this._fill){this.d.fill();} this.f0(); }, strokeText: function(t,x,y){this.d.beginPath(); this.s0();this.d.lineWidth = this.lineWidth; this.d.strokeStyle = this.strokeColor.getCssString(); this.d.textAlign = this._textAlign; this.d.font = this._textSize+"px "+this._font; if(arguments.length == 2){this.d.strokeText(t, x.x, x.y); }else{this.d.strokeText(t, x, y); } if(this._stroke){this.d.stroke();}if(this._fill){this.d.fill();}this.f0(); }, beginShape: function(){this.d.beginPath(); this.s0(); this.d1 = false; }, vertex: function(x,y){if(y == undefined){var _x = x; var y = _x.y; var x = _x.x; } if(this.d1){this.d.lineTo(x,y); }else{this.d.moveTo(x,y); this.d1 = true; } }, endShape: function(){this.d.lineWidth = this.lineWidth; this.d.strokeStyle = this.strokeColor.getCssString(); this.d.fillStyle = this.fillColor.getCssString(); if(this._stroke){this.d.stroke();} if(this._fill){this.d.fill();} this.f0(); } }); Object.prototype.clone = function(){var o = new this.constructor(); for(var k in this){if(this.hasOwnProperty(k)){if(typeof k == 'object') o[k] = this[k].clone(); else o[k] = this[k];}}return o;}; function get(o){for(var k in o){if(o.hasOwnProperty(k)){if(typeof k == 'object') this[k] = o[k].clone(); else this[k] = o[k]; } } return this; };
	Clock.prototype.get = get;Color.prototype.get = get;Draw.prototype.get = get;Vec2.prototype.get = get;Line2.prototype.get = get;Text.prototype.get = get;Button.prototype.get = get;global.Draw = Draw;global.Vec2 = Vec2;global.Line2 = Line2;global.Text = Text;global.Button = Button;global.Color = Color;global.Clock = Clock;
})(this);